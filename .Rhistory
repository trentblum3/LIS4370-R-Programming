data <- read.csv(file_name)
league_data <- read.csv(league_file)
# Select the row of interest and extract the relevant columns
player_stats <- data[row_num, c("Pos", "Name", "G", "PA", "AB", "R", "H", "X2B", "X3B", "HR", "RBI", "BB", "IBB", "SO", "HBP", "SB", "CS")]
# Calculate OBP and SLG
singles <- player_stats$H - player_stats$X2B - player_stats$X3B - player_stats$HR
numerator <- singles + 2 * player_stats$X2B + 3 * player_stats$X3B + 4 * player_stats$HR + player_stats$BB + player_stats$HBP
denominator <- player_stats$AB + player_stats$BB + player_stats$HBP
obp <- numerator / denominator
slg <- (singles + 2 * player_stats$X2B + 3 * player_stats$X3B + 4 * player_stats$HR) / player_stats$AB
# Calculate OPS
ops <- obp + slg
# Calculate WAR
league_rpg <- mean(league_data$R) / mean(league_data$G)
replacement_level <- (0.75 * league_rpg) * player_stats$PA
position_adjustment <- 0
if(player_stats$PA >= 502){
# Calculate position adjustment for qualified players
position <- data[row_num, "Pos"]
pos_data <- read.csv("pos_adjustments.csv")
position_adjustment <- pos_data[pos_data$Position == position, "WAR"]
}
war <- ((ops - 0.690) / 1.15 + (league_rpg / 2) * player_stats$PA / 600 - replacement_level) / (league_rpg / 9) + position_adjustment
# Return the WAR value
return(war)
}
calculate_war('rays2022stats.csv', 'league2022stats.csv', 1)
library(httr)
library(rvest)
# Read the data from the csv file into a data frame
data <- read.csv("rays2022stats.csv")
league_data <- read.csv("league2022stats.csv")
# Select the row of interest and extract the relevant columns
player_stats <- data[row_num, c("Pos", "Name", "G", "PA", "AB", "R", "H", "X2B", "X3B", "HR", "RBI", "BB", "IBB", "SO", "HBP", "SB", "CS")]
View(data)
library(httr)
library(rvest)
# Read the data from the csv file into a data frame
data <- read.csv("rays2022stats.csv")
league_data <- read.csv("league2022stats.csv")
# Select the row of interest and extract the relevant columns
player_stats <- data[row_num, c("Pos", "Name", "G", "PA", "AB", "R", "H", "X2B", "X3B", "HR", "RBI", "BB", "IBB", "SO", "HBP", "SB", "CS")]
library(httr)
library(rvest)
calculate_war <- function(file_name, league_file, row_num){
# Read the data from the csv file into a data frame
data <- read.csv(file_name)
league_data <- read.csv(league_file)
# Select the row of interest and extract the relevant columns
player_stats <- data[row_num, c("Pos", "Name", "G", "PA", "AB", "R", "H", "X2B", "X3B", "HR", "RBI", "BB", "IBB", "SO", "HBP", "SB", "CS")]
# Calculate OBP and SLG
singles <- player_stats$H - player_stats$X2B - player_stats$X3B - player_stats$HR
numerator <- singles + 2 * player_stats$X2B + 3 * player_stats$X3B + 4 * player_stats$HR + player_stats$BB + player_stats$HBP
denominator <- player_stats$AB + player_stats$BB + player_stats$HBP
obp <- numerator / denominator
slg <- (singles + 2 * player_stats$X2B + 3 * player_stats$X3B + 4 * player_stats$HR) / player_stats$AB
# Calculate OPS
ops <- obp + slg
# Calculate WAR
league_rpg <- mean(league_data$R) / mean(league_data$G)
replacement_level <- (0.75 * league_rpg) * player_stats$PA
position_adjustment <- 0
if(player_stats$PA >= 502){
# Calculate position adjustment for qualified players
position <- data[row_num, "Pos"]
pos_data <- read.csv("pos_adjustments.csv")
position_adjustment <- pos_data[pos_data$Position == position, "WAR"]
}
war <- ((ops - 0.690) / 1.15 + (league_rpg / 2) * player_stats$PA / 600 - replacement_level) / (league_rpg / 9) + position_adjustment
# Return the WAR value
return(war)
}
calculate_war('rays2022stats.csv', 'league2022stats.csv', 1)
# Load data (using example data)
data <- read.csv("rays2022.csv")
# Load data (using example data)
data <- read.csv("rays2022stats.csv")
# Create linear regression model
model <- lm(R ~ OPS, data = data)
# Summarize model
summary(model)
# Plot data and regression line
library(ggplot2)
ggplot(data, aes(x = OPS, y = R)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
# Load the CSV file containing the player stats
team_stats <- read.csv("rays2023stats.csv")
# Calculate the team's OPS using the calculate_stats function
team_ops <- calculate_stats(hits = team_stats$H, walks = team_stats$BB, at_bats = team_stats$AB,
singles = team_stats$H - team_stats$X2B - team_stats$X3B - team_stats$HR,
doubles = team_stats$X2B, triples = team_stats$X3B, home_runs = team_stats$HR)$OPS
calculate_stats <- function(hits, walks, at_bats, singles, doubles, triples, home_runs) {
# Calculate On Base Percentage (OBP)
plate_appearances <- at_bats + walks
total_hits <- singles + doubles + triples + home_runs
obp <- (hits + walks) / plate_appearances
# Calculate Slugging Percentage (SLG)
total_bases <- singles + (2 * doubles) + (3 * triples) + (4 * home_runs)
slg <- total_bases / at_bats
# Calculate On-base Plus Slugging (OPS)
ops <- obp + slg
# Return a list containing the calculated stats
return(list(OBP = obp, SLG = slg, OPS = ops))
}
# Sample stats for a baseball player
hits <- 120
walks <- 40
at_bats <- 400
singles <- 70
doubles <- 30
triples <- 5
home_runs <- 15
# Calculate the player's stats
player_stats <- calculate_stats(hits, walks, at_bats, singles, doubles, triples, home_runs)
# Print the calculated stats
print(player_stats)
# Load the CSV file containing the player stats
team_stats <- read.csv("rays2023stats.csv")
# Calculate the team's OPS using the calculate_stats function
team_ops <- calculate_stats(hits = team_stats$H, walks = team_stats$BB, at_bats = team_stats$AB,
singles = team_stats$H - team_stats$X2B - team_stats$X3B - team_stats$HR,
doubles = team_stats$X2B, triples = team_stats$X3B, home_runs = team_stats$HR)$OPS
# Load the previous season's dataset
previous_season_data <- data.frame(read.csv("rays2022stats.csv")[1:24,])
# Fit a linear model with OPS as the response variable and other variables as predictors
model <- lm(OPS ~ previous_season_data$H + previous_season_data$BB + previous_season_data$AB, data = previous_season_data)
# Predict the team's OPS for the current season using the model and the partial dataset
predicted_ops <- predict(model, newdata = data.frame(Variable1 = hits, Variable2 = walks, Variable3 = at_bats, OPS = team_ops))
# Print the predicted OPS for the current season
print(predicted_ops)
# Load the CSV file containing the player stats
team_stats <- read.csv("rays2023stats.csv")
# Calculate the team's OPS using the calculate_stats function
team_ops <- calculate_stats(hits = team_stats$H, walks = team_stats$BB, at_bats = team_stats$AB,
singles = team_stats$H - team_stats$X2B - team_stats$X3B - team_stats$HR,
doubles = team_stats$X2B, triples = team_stats$X3B, home_runs = team_stats$HR)$OPS
# Load the previous season's dataset
previous_season_data <- data.frame(read.csv("rays2022stats.csv")[1:24,])
# Fit a linear model with OPS as the response variable and other variables as predictors
model <- lm(OPS ~ previous_season_data$H + previous_season_data$BB + previous_season_data$AB, data = previous_season_data)
# Predict the team's OPS for the current season using the model and the partial dataset
predicted_ops <- predict(model, newdata = data.frame(Variable1 = hits, Variable2 = walks, Variable3 = at_bats, OPS = team_ops))
# Print the predicted OPS for the current season
print(predicted_ops)
# Load data (using example data)
data <- read.csv("rays2022stats.csv")
# Create linear regression model
model <- lm(R ~ OPS, data = data)
# Summarize model
summary(model)
# Plot data and regression line
library(ggplot2)
ggplot(data, aes(x = OPS, y = R)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
#this needs to return runs scored per OPS
slope <- coef(model)["OPS"]
print(slope)
avg_OPS <- mean(OPS)
avg_OPS <- mean("OPS")
print(avg_OPS)
# Load data (using example data)
data <- read.csv("rays2022stats.csv")
# Create linear regression model
model <- lm(R ~ OPS, data = data)
# Summarize model
summary(model)
# Plot data and regression line
library(ggplot2)
ggplot(data, aes(x = OPS, y = R)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
#Find the amount of runs scored per OPS
slope <- coef(model)["OPS"]
print(slope)
#Find the mean team OPS
mean_OPS <- mean(data$OPS)
print(mean_OPS)
predicted_runs <- slope*mean_OPS
print(predicted_runs)
View(data)
# Load data (using example data)
data <- read.csv("rays2022stats.csv")
# Create linear regression model
model <- lm(R ~ OPS, data = data, na.rm = TRUE)
# Summarize model
summary(model)
# Plot data and regression line
library(ggplot2)
ggplot(data, aes(x = OPS, y = R)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
#Find the amount of runs scored per OPS
slope <- coef(model)["OPS"]
print(slope)
#Find the mean team OPS
mean_OPS <- mean(data$OPS)
print(mean_OPS)
predicted_runs <- slope*mean_OPS
print(predicted_runs)
# Load data (using example data)
data <- read.csv("rays2022stats.csv", na.rm = TRUE)
# Load data (using example data)
data <- read.csv("rays2022stats.csv")
# Create linear regression model
model <- lm(R ~ OPS, data = data[1:24])
# Summarize model
summary(model)
# Plot data and regression line
library(ggplot2)
ggplot(data, aes(x = OPS, y = R)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
#Find the amount of runs scored per OPS
slope <- coef(model)["OPS"]
print(slope)
#Find the mean team OPS
mean_OPS <- mean(data$OPS)
print(mean_OPS)
predicted_runs <- slope*mean_OPS
print(predicted_runs)
library(ggplot2)
# Load data (using example data)
data <- read.csv("rays2022stats.csv")
# Create linear regression model
model <- lm(R ~ OPS, data = data[1:24])
# Summarize model
summary(model)
# Plot data and regression line
ggplot(data, aes(x = OPS, y = R)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
#Find the amount of runs scored per OPS
slope <- coef(model)["OPS"]
print(slope)
#Find the mean team OPS
mean_OPS <- mean(data$OPS)
print(mean_OPS)
predicted_runs <- slope*mean_OPS
print(predicted_runs)
library(ggplot2)
# Load data (using example data)
data <- read.csv("rays2022stats.csv")
# Create linear regression model
model <- lm(R ~ OPS, data = data)
# Summarize model
summary(model)
# Plot data and regression line
ggplot(data, aes(x = OPS, y = R)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
#Find the amount of runs scored per OPS
slope <- coef(model)["OPS"]
print(slope)
#Find the mean team OPS
mean_OPS <- mean(data$OPS)
print(mean_OPS)
predicted_runs <- slope*mean_OPS
print(predicted_runs)
library(ggplot2)
# Load data (using example data)
data <- read.csv("rays2022stats.csv")
# Create linear regression model
model <- lm(R ~ OPS, data = data)
# Summarize model
summary(model)
# Plot data and regression line
ggplot(data, aes(x = OPS, y = R)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
#Find the amount of runs scored per OPS
slope <- coef(model)["OPS"]
print(slope)
#Find the mean team OPS
mean_OPS <- mean(data$OPS)
print(mean_OPS)
predicted_runs <- slope*mean_OPS*nrow(data)
print(predicted_runs)
library(ggplot2)
# Load data (using example data)
data <- read.csv("rays2022stats.csv")
# Create linear regression model
model <- lm(R ~ OPS, data = data)
# Summarize model
summary(model)
# Plot data and regression line
ggplot(data, aes(x = OPS, y = R)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
#Find the amount of runs scored per OPS
slope <- coef(model)["OPS"]
print(slope)
#Find the mean team OPS
mean_OPS <- mean(data$OPS)
print(mean_OPS)
predicted_runs <- slope*mean_OPS*nrow(data)
print(predicted_runs)
total_runs <- sum(data$R)
print(total_runs)
library(ggplot2)
# Load data (using example data)
data <- read.csv("rays2022stats.csv")
# Create linear regression model
model <- lm(R ~ OPS, data = data)
# Summarize model
summary(model)
# Plot data and regression line
ggplot(data, aes(x = OPS, y = R)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
#Find the amount of runs scored per OPS
slope <- coef(model)["OPS"]
print(slope)
#Find the mean team OPS
mean_OPS <- mean(data$OPS)
print(mean_OPS)
predicted_runs <- (slope*mean_OPS - 51.818) * nrow(data)
print(predicted_runs)
total_runs <- sum(data$R)
print(total_runs)
library(ggplot2)
# Load data (using example data)
data <- read.csv("rays2022stats.csv")
data2023 <- read.csv("rays2023stats.csv")
# Create linear regression model
model <- lm(R ~ OPS, data = data)
# Summarize model
summary(model)
# Plot data and regression line
ggplot(data, aes(x = OPS, y = R)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
#Find the amount of runs scored per OPS
slope <- coef(model)["OPS"]
print(slope)
#Find the mean team OPS
mean_OPS <- mean(data$OPS)
print(mean_OPS)
#Use y-intercept to find average player's Runs scored in a season, multiply it by number of players to find predicted runs for season.
predicted_runs <- (slope*mean_OPS - 51.81) * nrow(data)
print(predicted_runs)
#Actual runs scored in 2022 season.
total_runs <- sum(data$R)
print(total_runs)
#Predicted runs for 2023 based on current season's stats:
model23 <- lm(R ~ OPS, data = data2023)
slope23 <- coef(model2)["OPS"]
library(ggplot2)
# Load data (using example data)
data <- read.csv("rays2022stats.csv")
data2023 <- read.csv("rays2023stats.csv")
# Create linear regression model
model <- lm(R ~ OPS, data = data)
# Summarize model
summary(model)
# Plot data and regression line
ggplot(data, aes(x = OPS, y = R)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
#Find the amount of runs scored per OPS
slope <- coef(model)["OPS"]
print(slope)
#Find the mean team OPS
mean_OPS <- mean(data$OPS)
print(mean_OPS)
#Use y-intercept to find average player's Runs scored in a season, multiply it by number of players to find predicted runs for season.
predicted_runs <- (slope*mean_OPS - 51.81) * nrow(data)
print(predicted_runs)
#Actual runs scored in 2022 season.
total_runs <- sum(data$R)
print(total_runs)
#Predicted runs for 2023 based on current season's stats:
model23 <- lm(R ~ OPS, data = data2023)
slope23 <- coef(model23)["OPS"]
print(slope23)
mean_OPS23 <- mean(data2023$OPS)
print(mean_OPS23)
predicted_runs23 <- (slope23*mean_OPS23 - 51.81) * nrow(data2023)
print(predicted_runs23)
library(ggplot2)
# Load data (using example data)
data <- read.csv("rays2022stats.csv")
data2023 <- read.csv("rays2023stats.csv")
# Create linear regression model
model <- lm(R ~ OPS, data = data)
# Summarize model
summary(model)
# Plot data and regression line
ggplot(data, aes(x = OPS, y = R)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
#Find the amount of runs scored per OPS
slope <- coef(model)["OPS"]
print(slope)
#Find the mean team OPS
mean_OPS <- mean(data$OPS)
print(mean_OPS)
#Use y-intercept to find average player's Runs scored in a season, multiply it by number of players to find predicted runs for season.
predicted_runs <- (slope*mean_OPS - 51.81) * nrow(data)
print(predicted_runs)
#Actual runs scored in 2022 season.
total_runs <- sum(data$R)
print(total_runs)
#Predicted runs for 2023 based on current season's stats:
model23 <- lm(R ~ OPS, data = data2023)
slope23 <- coef(model23)["OPS"]
print(slope23)
mean_OPS23 <- mean(data2023$OPS)
print(mean_OPS23)
predicted_runs23 <- (slope23*mean_OPS23 - 4.02) * nrow(data2023)
print(predicted_runs23)
library(ggplot2)
# Load data (using example data)
data <- read.csv("rays2022stats.csv")
data2023 <- read.csv("rays2023stats.csv")
# Create linear regression model
model <- lm(R ~ OPS, data = data)
# Summarize model
summary(model)
# Plot data and regression line
ggplot(data, aes(x = OPS, y = R)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
#Find the amount of runs scored per OPS
slope <- coef(model)["OPS"]
print(slope)
#Find the mean team OPS
mean_OPS <- mean(data$OPS)
print(mean_OPS)
#Use y-intercept to find average player's Runs scored in a season, multiply it by number of players to find predicted runs for season.
predicted_runs <- (slope*mean_OPS - 51.81) * nrow(data)
print("Predicted runs: " + predicted_runs)
library(ggplot2)
# Load data (using example data)
data <- read.csv("rays2022stats.csv")
data2023 <- read.csv("rays2023stats.csv")
# Create linear regression model
model <- lm(R ~ OPS, data = data)
# Summarize model
summary(model)
# Plot data and regression line
ggplot(data, aes(x = OPS, y = R)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
#Find the amount of runs scored per OPS
slope <- coef(model)["OPS"]
print(slope)
#Find the mean team OPS
mean_OPS <- mean(data$OPS)
print(mean_OPS)
#Use y-intercept to find average player's Runs scored in a season, multiply it by number of players to find predicted runs for season.
predicted_runs <- (slope*mean_OPS - 51.81) * nrow(data)
print("Predicted runs: ", predicted_runs)
library(ggplot2)
# Load data (using example data)
data <- read.csv("rays2022stats.csv")
data2023 <- read.csv("rays2023stats.csv")
# Create linear regression model
model <- lm(R ~ OPS, data = data)
# Summarize model
summary(model)
# Plot data and regression line
ggplot(data, aes(x = OPS, y = R)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
#Find the amount of runs scored per OPS
slope <- coef(model)["OPS"]
print(slope)
#Find the mean team OPS
mean_OPS <- mean(data$OPS)
print(mean_OPS)
#Use y-intercept to find average player's Runs scored in a season, multiply it by number of players to find predicted runs for season.
predicted_runs <- (slope*mean_OPS - 51.81) * nrow(data)
print(predicted_runs)
#Actual runs scored in 2022 season.
total_runs <- sum(data$R)
print(total_runs)
#Predicted runs for 2023 based on current season's stats:
model23 <- lm(R ~ OPS, data = data2023)
slope23 <- coef(model23)["OPS"]
print(slope23)
mean_OPS23 <- mean(data2023$OPS)
print(mean_OPS23)
predicted_runs23 <- (slope23*mean_OPS23 - 4.02) * nrow(data2023)
print(predicted_runs23)
View(data2023)
calculate_stats <- function(hits, walks, at_bats, singles, doubles, triples, home_runs) {
# Calculate On Base Percentage (OBP)
plate_appearances <- at_bats + walks
total_hits <- singles + doubles + triples + home_runs
obp <- (hits + walks) / plate_appearances
# Calculate Slugging Percentage (SLG)
total_bases <- singles + (2 * doubles) + (3 * triples) + (4 * home_runs)
slg <- total_bases / at_bats
# Calculate On-base Plus Slugging (OPS)
ops <- obp + slg
# Return a list containing the calculated stats
return(list(OBP = obp, SLG = slg, OPS = ops))
}
# Sample stats for a baseball player
hits <- 120
walks <- 40
at_bats <- 400
singles <- 70
doubles <- 30
triples <- 5
home_runs <- 15
# Calculate the player's stats
player_stats <- calculate_stats(hits, walks, at_bats, singles, doubles, triples, home_runs)
# Print the calculated stats
print(player_stats)
